import type { Linter } from 'eslint';
import type { ESLintRules } from 'eslint/rules';

export const baseRules = {
  'array-callback-return': [
    'error',
    { checkForEach: true },
  ] satisfies ESLintRules['array-callback-return'],
  'no-constructor-return': ['error'],
  'no-duplicate-imports': ['error'],
  'no-promise-executor-return': ['error'],
  'no-self-compare': ['error'],
  'no-template-curly-in-string': ['error'],
  'no-unmodified-loop-condition': ['error'],
  'no-unreachable-loop': ['error'],
  'no-use-before-define': ['error'],
  'no-useless-assignment': ['error'],
  'require-atomic-updates': ['error'],
  'block-scoped-var': ['error'],
  camelcase: [
    'error',
    { ignoreImports: true, ignoreGlobals: true },
  ] satisfies ESLintRules['camelcase'],
  'class-methods-use-this': ['error'],
  'consistent-this': ['error'],
  'default-case': ['error'],
  'default-case-last': ['error'],
  'default-param-last': ['error'],
  'dot-notation': ['error'],
  eqeqeq: [
    'error',
    'always',
    { null: 'ignore' },
  ] satisfies ESLintRules['eqeqeq'],
  'no-restricted-syntax': [
    'error',
    {
      selector: 'FunctionExpression',
      message: 'Use arrow function instead.',
    },
    {
      selector: 'FunctionDeclaration',
      message: 'Use arrow function instead.',
    },
  ] satisfies ESLintRules['no-restricted-syntax'],
  'grouped-accessor-pairs': ['error', 'getBeforeSet'],
  'id-length': [
    'error',
    { exceptions: ['i', 'e', '_'] },
  ] satisfies ESLintRules['id-length'],
  'max-classes-per-file': ['error'],
  'max-depth': ['error'],
  'max-nested-callbacks': [
    'error',
    3,
  ] satisfies ESLintRules['max-nested-callbacks'],
  'max-params': ['error', { max: 4 }] satisfies ESLintRules['max-params'],
  'max-statements': ['error', 25] satisfies ESLintRules['max-statements'],
  'new-cap': [
    'error',
    { capIsNew: false, newIsCap: true },
  ] satisfies ESLintRules['new-cap'],
  'no-alert': ['error'],
  'no-array-constructor': ['error'],
  'no-bitwise': ['error'],
  'no-caller': ['error'],
  'no-console': ['error'],
  'no-else-return': ['error'],
  'no-empty-function': ['error'],
  'no-eval': ['error'],
  'no-extend-native': ['error'],
  'no-extra-bind': ['error'],
  'no-labels': ['error'],
  'no-implicit-coercion': ['error'],
  'no-implied-eval': ['error'],
  'no-invalid-this': ['error'],
  'no-iterator': ['error'],
  'no-lone-blocks': ['error'],
  'no-lonely-if': ['error'],
  'no-loop-func': ['error'],
  'no-multi-assign': ['error'],
  'no-multi-str': ['error'],
  'no-negated-condition': ['error'],
  'no-nested-ternary': ['error'],
  'no-new': ['error'],
  'no-new-func': ['error'],
  'no-new-wrappers': ['error'],
  'no-object-constructor': ['error'],
  'no-param-reassign': ['error'],
  'no-plusplus': ['error'],
  'no-proto': ['error'],
  'no-return-assign': ['error'],
  'no-script-url': ['error'],
  'no-sequences': ['error'],
  'no-shadow': ['error'],
  'no-throw-literal': ['error'],
  'no-undef-init': ['error'],
  'no-unneeded-ternary': ['error'],
  'no-unused-expressions': ['error'],
  'no-unused-private-class-members': ['error'],
  'no-useless-call': ['error'],
  'no-useless-computed-key': ['error'],
  'no-useless-concat': ['error'],
  'no-useless-constructor': ['error'],
  'no-useless-rename': ['error'],
  'no-useless-return': ['error'],
  'no-var': ['error'],
  'object-shorthand': [
    'error',
    'always',
  ] satisfies ESLintRules['object-shorthand'],
  'operator-assignment': [
    'error',
    'always',
  ] satisfies ESLintRules['operator-assignment'],
  'prefer-arrow-callback': ['error'],
  'prefer-const': ['error'],
  'prefer-named-capture-group': ['error'],
  'prefer-numeric-literals': ['error'],
  'prefer-object-has-own': ['error'],
  'prefer-object-spread': ['error'],
  'prefer-promise-reject-errors': ['error'],
  'prefer-regex-literals': ['error'],
  'prefer-rest-params': ['error'],
  'prefer-spread': ['error'],
  'prefer-template': ['error'],
  radix: ['error', 'as-needed'] satisfies ESLintRules['radix'],
  'require-unicode-regexp': ['error'],
  'symbol-description': ['error'],
  yoda: ['error', 'never'] satisfies ESLintRules['yoda'],
} satisfies Linter.RulesRecord;

export type CustomRule = keyof typeof baseRules;
